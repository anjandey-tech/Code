//https://leetcode.com/problems/redundant-connection/
class Solution {
public:
    int find(vector<int> &parent,int i)
    {
        if(parent[i] == -1)
            return i;
        return parent[i] = find(parent,parent[i]);
    }
    void Union(vector<int> &parent, int x, int y)
    {
        int px = find(parent,x);
        int py = find(parent,y);
        if(px!=py)
        parent[px] = py;
    }
    
    vector<int> findRedundantConnection(vector<vector<int>>& edges) 
    {
        vector<int> v; //return ans
        int n = edges.size();
        vector<int> parent(n+1,-1);//itself parent 

        for(int i=0;i<edges.size();i++)
        {
            int pi,pj;
            
            pi = find(parent, edges[i][0]);
            pj = find(parent,edges[i][1]);
            
            if(pi!=pj) //diffent set 
            {
                Union(parent,edges[i][0],edges[i][1]);
             }
            else //same set -> redundent 
            {
                v.push_back(edges[i][0]);
                v.push_back(edges[i][1]);
                return v;
            }
        }
        return {};
    }
};
