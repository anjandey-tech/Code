#include<bits/stdc++.h>
using namespace std;
int main()
{
  int n, m;
  cin >> n >> m;

  vector<vector<int>> arr;
  for (int i = 0; i < n; i++)
  {
    vector<int> temp;
    for (int j = 0; j < m; j++)
    {
      int ele;
      cin >> ele;
      temp.push_back(ele);
    }
    arr.push_back(temp);
    temp.clear();
  }
 
  int ans[n][m];
  
  for (int i = 0; i < n; i++)
  {
    for (int j = 0; j < m; j++)
    {
        ans[i][j]=0;
    }
  
  }



 
  queue<pair<int, int>> q;

  for (int i = 0; i < n; i++)
  {
    for (int j = 0; j < m; j++)
    {
      if (arr[i][j] == 0)
      {
        q.push(make_pair(i, j));
      }
    }

  }
  
  int dx[4]={0,0,1,-1};
  int dy[4]={1,-1,0,0};
    
   int level = 0;

int ni=0,nj=0,ci=0,cj=0;
while(!q.empty())
{
    
   
    int size = q.size();
  //  cout<<size<<endl;
     
    level++;
   // cout<<"level="<<level<<endl;
    while(size--)
    {    
        auto p = q.front();
            ci = p.first;
            cj = p.second;
           q.pop();
     //   cout<<"track"; 
        //cout<<level<<endl;
         for(int i=0;i<4;i++)
         {
             ni = ci + dx[i];
             nj = cj + dy[i];
            // cout<<"ni="<<ni<<"nj="<<nj<<endl;
             if(ni>=0 and ni<n and nj>=0 and nj<m)
             {
                 if(arr[ni][nj] == 1)
                 {
                   //  cout<<"inside"<<endl;
                    // cout<<ni<<nj<<endl;
                     q.push(make_pair(ni,nj));
                     ans[ni][nj]=level;
                    // cout<<"anslevel="<<endl;
                     arr[ni][nj]=0;
                 }
             }
         }
    }
}
//  cout << " matrix===================" << endl;

  for (int i = 0; i < n; i++)
  {
    for (int j = 0; j < m; j++)
    {
      cout << ans[i][j] << " ";
    }
    cout << endl;
  }
  


}
