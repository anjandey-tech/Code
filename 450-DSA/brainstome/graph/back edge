//https://leetcode.com/problems/reorder-routes-to-make-all-paths-lead-to-the-city-zero/

class Solution {
public:
 void   dfs(int x,  vector<vector<pair<int,int>>> &adj, vector<bool> vis,int &ans)
 {
      vis[x] = true;
       
        for(auto it:adj[x])
        {
         cout<<it.first;   
            if(vis[it.first] == false)
            {
             cout<<it.second<<endl;   
               dfs(it.first,adj,vis,ans);
                ans+=it.second;
            }
        }
        
     
        
    }
    int minReorder(int n, vector<vector<int>>& c) 
    {
        
        vector<vector<pair<int,int>>> adj(n);
        
        for(int i=0;i<c.size();i++)
        {
            
                
                adj[c[i][0]].push_back(make_pair(c[i][1],1));
            adj[c[i][1]].push_back(make_pair(c[i][0],0));
             
        }
        
//         for(int i = 0 ;i<n;i++)
//   {
//      cout<<i<<"--->";
//      for(auto it : adj[i])
//      {
//         cout<<it.first<<""<<"{"<<it.second<<"}"<<" ";
//      }
//      cout<<endl;
//   }
 
    vector<bool> vis(n,false);
        int ans = 0;
        
        dfs(0,adj,vis,ans);
        
      return ans;  
        
        
    }
};
