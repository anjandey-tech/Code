https://www.youtube.com/watch?v=uyetDh-DyDg&list=PL-Jc9J83PIiHO9SQ6lxGuDsZNt2mkHEn0&index=1

// import java.io.*;
import java.util.*;

public class Main {
  public static void display(int[][] board)
  {
    for (int i = 0; i < board.length; i++)
    {
      for (int j = 0; j < board[0].length; j++)
      {
        System.out.print(board[i][j] + " ");
      }
      System.out.println();
    }
  }

  public static void solveSudoku(int[][] board, int i, int j)
  {

    if (i == board.length)
    {
      display(board);
      return ;
    }
    int ni = 0;    //row
    int nj = 0; // column

//this if block help us to calculate next cell
    if (j == board[0].length - 1) // last column
    {
      ni = i + 1; // next row
      nj = 0;
    }
    if (j !=  board[0].length - 1 )
    {
      ni = i;         // row same
      nj = j + 1;     // col increase

    }

    if (board[i][j] != 0) // already fill move to next cell 
    {
      solveSudoku(board, ni, nj);
    }
    else
    {
      for (int po = 1; po <= 9; po++)// not filled, check possible value
      {
        if (isValid(board, i, j, po) == true)
        {
          board[i][j] = po;
          solveSudoku(board, ni, nj);
          board[i][j] = 0;
        }
      }

    }


  }

  public static boolean isValid(int [][]board, int x, int y, int po)
  {

//checking whole row
    for (int j = 0 ; j < 9; j++)
    {
      if (board[x][j] == po)
        return false;
    }

//checking whole column
    for (int i = 0; i < 9; i++)
    {
      if (board[i][y] == po)
      {
        return false;
      }
    }

//checking  3*3 submatrix
    int ci = (x / 3) * 3;

    int cj = (y / 3) * 3;


    for (int i = 0; i < 3; i++)
    {
      for (int j = 0; j < 3 ; j++)
      {
        if (board[i + ci][j + cj] == po)
          return false;

      }
    }

    return true;



  }

  public static void main(String[] args) throws Exception
  {
    Scanner scn = new Scanner(System.in);
    int[][] arr = new int[9][9];
    for (int i = 0; i < 9; i++)
    {
      for (int j = 0; j < 9; j++)
      {
        arr[i][j] = scn.nextInt();
      }
    }

    solveSudoku(arr, 0, 0);
  }
}
