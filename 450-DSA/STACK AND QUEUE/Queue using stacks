 // CPP program to implement Queue using
// two stacks with costly enQueue()
#include <bits/stdc++.h>
using namespace std;

class Queue {
	stack<int> s1, s2;
	int curr_size ;
	public:
	Queue()
	{
	   curr_size=0;
	}

	void enQueue(int x)
	{
		curr_size++;
		// Move all elements from s1 to s2
		while (!s1.empty()) {
			s2.push(s1.top());
			s1.pop();
		}

		// Push item into s1
		s1.push(x);

		// Push everything back to s1
		while (!s2.empty()) {
			s1.push(s2.top());
			s2.pop();
		}
	}

	// Dequeue an item from the queue
void deQueue()
	{
		// if first stack is empty
		if (s1.empty()) {
			cout << "Q is Empty";
			exit(0);
		}

		// Return top of s1
		
		s1.pop();
		 
	}
	
	int  top()
	{
	 return  s1.top();
	     
	}
};

// Driver code
int main()
{
	Queue q;
	q.enQueue(1);
	q.enQueue(2);
	q.enQueue(3);
cout << q.top() << '\n';
  
  q.deQueue()  ;
	cout << q.top() << '\n';

	return 0;
}









amortized pop top 0(1)
 // CPP program to implement Queue using
// two stacks with costly enQueue()
#include <bits/stdc++.h>
using namespace std;

class Queue {
	stack<int> s1, s2;
	int curr_size ;
	public:
	Queue()
	{
	   curr_size=0;
	}

	void enQueue(int x)
	{
	 s1.push(x);
		 
	}

	// Dequeue an item from the queue
void deQueue()
	{
		// if first stack is empty
		if (s1.empty() and s2.empty()) {
			cout << "Q is Empty";
		 
		}
else
{
   if(s2.empty())
   while(!s1.empty())
   {
      s2.push(s1.top());
      s1.pop();
   }
   
   s2.pop();
   
   
}
		 
		 
	}
	
	int  top()
	{
	  if(s1.empty() and s2.empty())
	  {
	     cout<<"stack is empty("<<endl;
	  }
	  
	  else
	  {
	     if(s2.empty())
	     {
	        
	        while(!s1.empty())
	        {
	           s2.push(s1.top());
	           
	           s1.pop();
	        }
	     }
	     
	     int x =s2.top();
	     return x;
	     
	  }
	  
	  
	     
	}
};

// Driver code
int main()
{
	Queue q;
	q.enQueue(1);
	q.enQueue(2);
	q.enQueue(3);
cout << q.top() << '\n';
  
  q.deQueue()  ;
	cout << q.top() << '\n';

	return 0;
}
