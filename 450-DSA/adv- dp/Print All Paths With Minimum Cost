  //pepcoding
#include<bits/stdc++.h>
using namespace std;
 class Pair {
     public:
      string psf;
      
      int i;
      int j;
public:
     Pair(string psf, int i, int j) {
         this->psf = psf;
         this->i = i;
         this->j = j;
      }
   };
int main()
{
    int row,column;
    cin>>row>>column;
    int arr[row][column]; //denote the cost for passing or using this cell
    
    for(int i=0;i<row;i++)
    {
        for(int j=0;j<column;j++)
        {
            cin>>arr[i][j];
        }
    }
    
    int dp[row][column];//depicts the cost for reaching the end cell from the present cell
    for(int i=row-1;i>=0;i--)
    {
        for(int j=column-1;j>=0;j--)
        {
            if(i==(row-1) and j==(column-1))//we are at last cell
            {
                dp[i][j]=arr[i][j];
            }
            
            else if(i==row-1)//we are at last row
            {
             dp[i][j]= dp[i][j+1]+arr[i][j];   
            }
            
            else if(j == (column-1))//we are at last column
            {
             dp[i][j] = dp[i+1][j]+arr[i][j];   
            }
            else//other position
            {
                
                dp[i][j] = min(dp[i+1][j],dp[i][j+1])+arr[i][j];
            }

        }
    }
    //cout<<dp[0][0]<<endl; //ans
    // for(int i=0;i<row;i++)
    // {
    //     for(int j=0;j<column;j++)
    //     {
    //         cout<<dp[i][j]<<" ";
    //     }
    //     cout<<endl;
    // }
    cout<<dp[0][0]<<endl; //ans
    queue<Pair> queue;
     // queue.add(new Pair("", 0, 0));
     queue.push(Pair("",0,0));
      while(queue.size() > 0){
          Pair rem = queue.front();
          queue.pop();
          if(rem.i ==  row - 1 && rem.j ==column - 1){ //last cell
              cout<<(rem.psf)<<endl;
          } else if(rem.i ==  row- 1){ // last row
                  queue.push(Pair(rem.psf + "H", rem.i, rem.j + 1));              
          } else if(rem.j ==  column - 1){ // last column
                  queue.push(Pair(rem.psf + "V", rem.i + 1, rem.j));              
          } else {
              if(dp[rem.i][rem.j + 1] < dp[rem.i + 1][rem.j]){
                  queue.push(Pair(rem.psf + "H", rem.i, rem.j + 1));
              } else if(dp[rem.i][rem.j + 1] > dp[rem.i + 1][rem.j]){
                  queue.push(Pair(rem.psf + "V", rem.i + 1, rem.j));
              } else {
                  queue.push(Pair(rem.psf + "V", rem.i + 1, rem.j));
                  queue.push(Pair(rem.psf + "H", rem.i, rem.j + 1));
              }
          }
      }
}
 
  // ArrayDeque<Pair> queue = new ArrayDeque<>();
   
