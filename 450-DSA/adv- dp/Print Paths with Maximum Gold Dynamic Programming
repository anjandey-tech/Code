#include<bits/stdc++.h>
using namespace std;
class Pair {
     public:
      string psf;
      int i;
      int j;
public:
     Pair(string psf, int i, int j) {
         this->psf = psf;
         this->i = i;
         this->j = j;
      }
   };
int main()
{
    int n,m;
    cin>>n>>m;
    int arr[n][m];
    int dp[n][m];
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<m;j++)
        {
            cin>>arr[i][j];
            dp[i][j] = 0;
        }
    }
    
    for(int j= m-1;j>=0;j--) //column
    {
        for(int i=0;i<n;i++) // row
        {
            
            if(j == m-1)//last column
            {
                dp[i][j] = arr[i][j];
            }
             else if( i == 0) //first row
            {
                dp[i][j] =arr[i][j]+ max(dp[i][j+1],dp[i+1][j+1]);
            }
            else if(i == n-1) //last row
            {
                dp[i][j] =arr[i][j]+ max(dp[i-1][j+1],dp[i][j+1]);
            }
            else
            {
              dp[i][j] = arr[i][j] + max(dp[i][j+1],max(dp[i-1][j+1],dp[i+1][j+1]));  
            }
           
        }
    }
    int maxi = INT_MIN;
    for(int i=0;i<n;i++) //iterate over the first row
    {
        if(dp[i][0]>maxi)
        maxi=dp[i][0];
    }
    cout<<maxi<<endl;
    queue<Pair> q;
    for(int i=0;i<n;i++)
    {
        if(dp[i][0] == maxi)
        q.push(Pair(to_string(i) +" ",i,0));
    }
    while(!q.empty())
    {
        Pair rem = q.front();
        q.pop();
        if(rem.j == m-1)
        {
            cout<<rem.psf<<endl;
        }
        else if(rem.i == 0) //first row
        {
           int a , b;
           a =dp[rem.i][rem.j+1],b= dp[rem.i+1][rem.j+1];
          int g = max(a,b);
         //   int g = max(dp[rem.i][rem.j+1],dp[rem.i+1][rem.j+1]);
            
            if(g == dp[rem.i][rem.j+1]) // next ele
            {
              q.push(Pair(rem.psf + "d2 ",rem.i,rem.j+1));  
            }
            if(g == dp[rem.i+1][rem.j+1])//lower
            {
                q.push(Pair(rem.psf+"d3 ",rem.i+1,rem.j+1));
            }
        }
        else if(rem.i == n-1) //last row
        {
           int g = max(dp[rem.i][rem.j+1],dp[rem.i-1][rem.j+1]);
           if(g == dp[rem.i-1][rem.j+1])//upper
            {
                q.push(Pair(rem.psf+"d1 ",rem.i-1,rem.j+1));
            }
            
            if(g == dp[rem.i][rem.j+1]) // next ele
            {
              q.push(Pair(rem.psf + "d2 ",rem.i,rem.j+1));  
            }
            
        }
        else {
            int g = max(dp[rem.i][rem.j+1],max(dp[rem.i-1][rem.j+1],dp[rem.i+1][rem.j+1]));
            
              if(g == dp[rem.i-1][rem.j+1])//upper
            {
                q.push(Pair(rem.psf+"d1 ",rem.i-1,rem.j+1));
            }
            
             if(g == dp[rem.i][rem.j+1]) // next ele
            {
              q.push(Pair(rem.psf + "d2 ",rem.i,rem.j+1));  
            }
            
            if(g == dp[rem.i+1][rem.j+1])//lower
            {
                q.push(Pair(rem.psf+"d3 ",rem.i+1,rem.j+1));
            }
        }
    }
    
}
