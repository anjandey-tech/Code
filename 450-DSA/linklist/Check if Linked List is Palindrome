class Solution{
  public:
    //Function to check whether the list is palindrome.
    Node* reverseList(Node* head)
    {
        Node* dummyheadnode=NULL;
        while(head!=NULL)
        {
        
       Node* dummynextnode=head->next;
        head->next=dummyheadnode;
                
         dummyheadnode=head;
        head=dummynextnode;
        }
    return dummyheadnode;
        
    }
    bool isPalindrome(Node *head)
    {
         if(head == NULL or head->next == NULL)
            return true;
        
        Node* slow = head;
        Node* fast = head;
        
        while(fast->next!=NULL and fast->next->next!=NULL ) // find middle of the ll
        {
            fast=fast->next->next;
            slow=slow->next;
        }
        //cout<<slow->val;
        slow->next =reverseList(slow->next);//pass the right part of slow pointer
        slow=slow->next; 
        while(slow!=NULL)
        {
            if(slow->data!=head->data)
            {
                return false;
            }
            slow=slow->next;
            head=head->next;
        }
        return true;
        //Your code here
    }
};
