  #include<bits/stdc++.h>
using namespace std;

int main(){
	int N,m;  //node edge
	cin >> N >> m;
	vector<pair<int,int> > adj[N];
	
//taking graph input
	int a,b,wt;
	for(int i = 0; i<m ; i++)
	{
		cin >> a >> b >> wt;
		adj[a].push_back(make_pair(b,wt));
		adj[b].push_back(make_pair(a,wt));
	}	
	
int parent[N]; // all index are -1
  // in graph -> u------v , we have to reach node v through u i.e. parent[v] = u;
  
int key[N];       //every index initialize to infine except zeroth index
bool mstSet[N]; // all false at first
     
     
  //every index initialize to infine except zeroth index
    for (int i = 0; i < N; i++) 
        key[i] = INT_MAX, mstSet[i] = false; 
	
    key[0] = 0;
    parent[0] = -1; //as zero node has no parent 
    int ansWeight = 0;
    for (int count = 0; count <= N - 1; count++) //as in mst we have n-1 edge 
    { 
        
        int mini = INT_MAX, u; 
  
        for (int v = 0; v<N; v++) //choose the minimum valur from key arr and which is also not part of mst
                                   // store that index in v.
	   if (mstSet[v] == false && key[v] < mini) 
	   {
                mini = key[v];
                u = v; 
	   }
                
         mstSet[u] = true;  //make memset true i.e. it is part of our mst
      ansWeight += mini; 
      cout<<ansWeight<<" ";
        
        for (auto it : adj[u]) //traversa all the adj of node
        { 
            int v = it.first;  //adj node
            int weight = it.second; //adj node weight
            if (mstSet[v] == false && weight < key[v]) //adj node is not part of mst and weight is less than previon weight
              { 
                 parent[v] = u;
                 key[v] = weight;   // update with small weight
              }
        }
            
    } 
    
    cout << ansWeight << endl;  
    
     for(auto it: mstSet)
     cout<<it<<" ";
     cout<<endl;
    
    for (int i = 1; i < N; i++) 
        cout << parent[i] << " - " << i <<" \n"; 
	return 0;
}

/*5
6
0 1 2 
0 3 6
1 2 3
1 4 5
2 4 7
1 3 8*/
