#include<bits/stdc++.h>
using namespace std;
#define int long long int 
vector<int> intime;
vector<int> outtime;
int timer=1;
void resize(int n)
{
	intime.resize(n+1);
	outtime.resize(n+1);
}
void dfs(int src,int par,vector<int> g[])
{
	intime[src]=timer++;
	for(auto x: g[src])
	{
		if(x!=par)
		{
			dfs(x,src,g);
			
		}
	}
	outtime[src]=timer++;
}

bool check(int x,int y)
{
	if(intime[x]>intime[y] and outtime[x]<outtime[y])//x is the subtree of y
	return true;
	return false;
}

int32_t main()
{
	ios::sync_with_stdio(0);
  cin.tie(0);
	int n; //N houses.
	cin>>n;
	timer=1;
	resize(n);
	vector<int> g[n+1];//vector is zero based indexing but here house start                           //number is 1 so n+1
	for(int i=0;i<n-1;i++)//we have n-1 edge //creating adj list
	{
		int x,y;
		cin>>x>>y;
		g[x].push_back(y);
		g[y].push_back(x);
	}
	dfs(1,0,g);
	int q;
	cin>>q; // number of query   
	for(int i=0;i<q;i++)
	{
		int type,x,y;   //x= oliver y=bob
		cin>>type>>x>>y; //y == bob and bob have to find oliver
		if(!check(x,y) and !check(y,x))  //if x and y are not in other subtree //                                    so it not possible to find oliver
		{
				cout<<"NO\n";
				continue;
		}
		if(type == 0) //bob go towards villa
		{
			if(check(y,x)) //bob should be present in the subtree of oliver
			cout<<"YES\n";
			else
			cout<<"NO\n";
		}
		else if(type==1) //bob go away from the villa
		{
			if(check(x,y))// oliver should be present in the subtree of bob
				cout<<"YES\n";
			else
			cout<<"NO\n";
		}
	
		
	}
	}
