 #include<bits/stdc++.h>
 using namespace std;
 
 void makeset()
 {
    for(int i=1;i<=n;i++)
    {
       parent[i]=i;
       rank[i]=0;
    }
 }
 
 int findpar(int node)
{
   if(node == parent[node])
   return node;
   
   return parent[node] = findpar(parent[node]); // path compression
} 

void union( int  u, int v)
{
   u =  findpar(u);
   v= findparv;
   
   
   if(rank[u]<rank[v])
   {
      parent[u]=v;
   }
   else if(rank[v]<rank[u])
   {
      parent[v]=u;
   }
   
   else
   {
      parent[v]=u; 
      rank[u]++;
   }
   
   
   
}
 int main()
 {
    
    makeset();
    int m;
    cin>>m;
    while(m--)
    {
       int u,v;
       cin>>u>>v;
       union(u,v);
    }
    //
    if(findpar(2)!= findpar(3))
    {
       cout<<"different componet";
    }
    else
    {
       cout<<"same componet";
    }
 }
