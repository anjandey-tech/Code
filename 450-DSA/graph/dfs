 #include<bits/stdc++.h>
using namespace std;
 
class Solution {
public:
     vector<int>v; //for storing travered node
     void solve(int src, vector<int>  vis ,vector<int> g[])
     {
         vis[src]=1;  // make node visited
         v.push_back(src); // push node
             if(!vis[x]) // not visited
             {
                 solve(x,vis,g); //recursive call to fun
             }
         }
     }

      vector<int>dfsOfGraph(int V, vector<int> adj[])
	{
	 v.clear();
	 vector<int> vis(V,0);
	 solve(0,vis,adj);
	 return v;
	}
};
 
int main(){
	int tc;
	cin >> tc;
	while(tc--)
	{
		int V, E;
    	cin >> V >> E;

    	vector<int> adj[V]; 

    	for(int i = 0; i < E; i++)
    	{
    		int u, v;
    		cin >> u >> v;
    		adj[u].push_back(v);
    		adj[v].push_back(u);
    	}
         
        Solution obj;
        vector<int>ans=obj.dfsOfGraph(V, adj);
        for(int i=0;i<ans.size();i++){
        	cout<<ans[i]<<" ";
        }
        cout<<endl;
	}
	return 0;
}  // } Driver Code Ends
