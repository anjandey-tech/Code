//in topological sort we print 0 indegree vertix then remove edge ,as a result we get new 
//zero indegree vertix.
// here we apply topological sort algo. topological sort is applicable on DAG
// IF WE apply topological sort ON DIRECTED Cyclic graph , then all the vertix is not come under 
// topological sort
#include<bits/stdc++.h>
using namespace std;
class Solution {
public:
	bool isCyclic(int V, vector<int> adj[]) 
	{
	    vector<int> indegre(V,0); // size = number of vertix and at first make each node indegre =0
	    queue<int> q;
	    for(int i=0;i<V;i++)
	    {
	        for(auto it: adj[i])
	        {
	             indegre[it]++;
	        }
	    }
	    
	    for(int i=0;i<V;i++)
	    {
	        if(indegre[i]==0)
	        q.push(i);
	    }
	    
	    int numberofeleinqueue = q.size();
	    
	    while(!q.empty())
	    {
	        int ele = q.front();
	        q.pop();
	        for(auto it : adj[ele])
	        {
	            indegre[it]--;
	            if( indegre[it]==0)
	            {
	                q.push(it);
	                numberofeleinqueue++;
	                
	            }
	        }
	    }
	    if(numberofeleinqueue==V) return false;  //no cycle
	   else return true; // cycle
	}
};

 


int main()
{
    
    int t;
    cin >> t;
    while(t--)
    {
    	int V, E;
    	cin >> V >> E;

    	vector<int> adj[V];

    	for(int i = 0; i < E; i++)
    	{
    		int u, v;
    		cin >> u >> v;
    		adj[u].push_back(v);
    	}

    	Solution obj;
    	//cout << obj.isCyclic(V, adj) << "\n";
    	
    	if(obj.isCyclic(V,adj))
    	{
    	  cout<<"Cycle";  
    	}
    	else
    	{
    	    cout<<"no cycle";
    	}
    }

    return 0;
}
--------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------
//another approach using dfs
//
bool solve(int src, vector<int> &visited, vector<int> &order, vector<int> adj[])
{
    visited[src]=1;
    order[src]=1;
    for(auto x:adj[src])
    {
        if(!visited[x])
        {
            bool conf= solve(x,visited,order,adj);
             if(conf==true)
        return true;
        }
        else if(order[x]) return true; // if node is visited and order mark as true, that means that node is visited covered on that dfs
    }
    order[src]=0; //make order 0 when we complete dfs of any particuler node
    return false;
}
	bool isCyclic(int V, vector<int> adj[]) 
	{  
	    
	
	    
	    vector<int> visited(V,0);//node visited all over the path
	    vector<int> order(V,0);// node visisted on that path 
for(int i=0;i<V;i++)
{
    if(!visited[i])//not visited
    {
        bool c = solve(i,visited,order,adj);
        if(c==true)
        return true;
    }
}
return false;
	    
	}
 
