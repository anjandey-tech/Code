//toposort cycle detection check it is possible to complete all task or not
#include <bits/stdc++.h>
using namespace std;
bool isCyclic(int numberoftask, vector<int> adj[])
{
    vector<int> indegre(numberoftask,0);
     queue<int> q;
	    for(int i=0;i<numberoftask;i++)
	    {
	        for(auto it: adj[i])
	        {
	             indegre[it]++;
	        }
	    }
	    for(int i=0;i<numberoftask;i++)
	    {
	        if(indegre[i]==0)
	        q.push(i);
	    }
	     int numberofeleinqueue = q.size();
	     while(!q.empty())
	    {
	        int ele = q.front();
	        q.pop();
	        for(auto it : adj[ele])
	        {
	            indegre[it]--;
	            if( indegre[it]==0)
	            {
	                q.push(it);
	                numberofeleinqueue++;
	                
	            }
	        }
	    }
	     if(numberofeleinqueue==numberoftask) return false;  //no cycle
	   else return true; // cycle
}
int main()
{
    int numberoftask = 5;
    vector<pair<int,int>> prerequisites;
    prerequisites.push_back(make_pair(1, 0)); // There are a total of 2 tasks to pick. 
                                                 //To pick task 1 you should have finished task 0. So it is possible.
    prerequisites.push_back(make_pair(2,1));
     prerequisites.push_back(make_pair(3,2));
     prerequisites.push_back(make_pair(4,3));
     prerequisites.push_back(make_pair(2,4));
   // prerequisites.push_back(make_pair(3,1));
    
   vector<int> adj[numberoftask]; //size of adj =4
   
   for(auto pre : prerequisites)
   {
     adj[pre.second].push_back(pre.first);//0-->1-->2 and 1-->3   
   }
    
    if(isCyclic(numberoftask,adj))
    	{
    	  cout<<"Cycle ";
    	  cout<<"Impossible to finish all tasks";
    	 
    	}
    	else
    	{
    	    cout<<"no cycle";
    	     cout << "Possible to finish all tasks";
    	}
    
	  
	  
}
